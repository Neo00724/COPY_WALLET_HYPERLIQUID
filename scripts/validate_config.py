#!/usr/bin/env python3
"""
Script de validation de la configuration du service de paires dynamiques.
V√©rifie que toutes les variables d'environnement sont correctement configur√©es.
"""

import os
import sys
from pathlib import Path

def load_env_file():
    """Charge le fichier .env et retourne les variables"""
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå Fichier .env non trouv√©")
        return {}
    
    env_vars = {}
    with open(env_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key] = value
    
    return env_vars

def validate_configuration():
    """Valide la configuration compl√®te"""
    print("üîç Validation de la configuration du service de paires dynamiques")
    print("=" * 70)
    
    # Charger les variables d'environnement
    env_vars = load_env_file()
    
    # Variables requises
    required_vars = {
        'TRACKED_ADDRESS': 'Adresse Hyperliquid √† suivre',
        'REFRESH_PERIOD': 'P√©riode de rafra√Æchissement (secondes)',
        'MAX_PAIRS': 'Nombre maximum de paires',
        'MIN_PAIR_AGE_HOURS': '√Çge minimum des paires (heures)'
    }
    
    print("üìã Variables d'environnement:")
    all_good = True
    
    for var, description in required_vars.items():
        if var in env_vars:
            value = env_vars[var]
            if var == 'TRACKED_ADDRESS':
                if value == 'CHANGE_ME_TO_THE_ADDRESS_YOU_WANT_TO_TRACK':
                    print(f"  ‚ö†Ô∏è  {var}: {value} (DOIT √äTRE CONFIGUR√â)")
                    all_good = False
                elif value.startswith('0x') and len(value) == 42:
                    print(f"  ‚úÖ {var}: {value}")
                else:
                    print(f"  ‚ùå {var}: {value} (FORMAT INVALIDE)")
                    all_good = False
            else:
                print(f"  ‚úÖ {var}: {value}")
        else:
            print(f"  ‚ùå {var}: NON D√âFINI ({description})")
            all_good = False
    
    print("\nüìÅ Fichiers requis:")
    
    # V√©rifier les fichiers requis
    required_files = {
        'docker-compose.yml': 'Configuration Docker',
        'Dockerfile.pairlist': 'Image Docker du service',
        'dynamic_pairlist_service.py': 'Service principal',
        'user_data/config.json': 'Configuration FreqTrade',
        'user_data/strategies/COPY_HL.py': 'Strat√©gie de copy trading'
    }
    
    for file_path, description in required_files.items():
        if Path(file_path).exists():
            print(f"  ‚úÖ {file_path}")
        else:
            print(f"  ‚ùå {file_path}: MANQUANT ({description})")
            all_good = False
    
    print("\nüîß Configuration FreqTrade:")
    
    # V√©rifier la configuration FreqTrade
    config_file = Path("user_data/config.json")
    if config_file.exists():
        try:
            import json
            with open(config_file, 'r') as f:
                config = json.load(f)
            
            # V√©rifier la configuration des pairlists
            pairlists = config.get('pairlists', [])
            if pairlists and len(pairlists) > 0:
                pairlist_config = pairlists[0]
                if pairlist_config.get('method') == 'RemotePairList':
                    url = pairlist_config.get('pairlist_url', '')
                    if 'dynamic-pairlist-service:5000' in url:
                        print(f"  ‚úÖ RemotePairList configur√©: {url}")
                    else:
                        print(f"  ‚ö†Ô∏è  URL incorrecte: {url}")
                        print("      Devrait √™tre: http://dynamic-pairlist-service:5000/pairlist")
                else:
                    print(f"  ‚ùå M√©thode incorrecte: {pairlist_config.get('method')}")
                    all_good = False
            else:
                print("  ‚ùå Aucune pairlist configur√©e")
                all_good = False
                
        except Exception as e:
            print(f"  ‚ùå Erreur lecture config.json: {e}")
            all_good = False
    
    print("\nüê≥ Configuration Docker:")
    
    # V√©rifier docker-compose.yml
    docker_compose = Path("docker-compose.yml")
    if docker_compose.exists():
        with open(docker_compose, 'r') as f:
            content = f.read()
            if 'dynamic-pairlist' in content and 'freqtrade' in content:
                print("  ‚úÖ Services dynamic-pairlist et freqtrade configur√©s")
            else:
                print("  ‚ùå Services manquants dans docker-compose.yml")
                all_good = False
            
            if 'depends_on' in content and 'service_healthy' in content:
                print("  ‚úÖ D√©pendances et health checks configur√©s")
            else:
                print("  ‚ö†Ô∏è  Health checks ou d√©pendances manquants")
    
    print("\n" + "=" * 70)
    
    if all_good:
        print("üéâ CONFIGURATION VALIDE !")
        print("‚úÖ Vous pouvez d√©marrer avec: docker-compose up --build -d")
        return True
    else:
        print("‚ùå CONFIGURATION INCOMPL√àTE")
        print("üîß Corrigez les erreurs ci-dessus avant de d√©marrer")
        return False

def main():
    """Fonction principale"""
    try:
        success = validate_configuration()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"‚ùå Erreur lors de la validation: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()